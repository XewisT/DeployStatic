[0m[1mdata.aws_route53_zone.main: Reading...[0m[0m
[0m[1mdata.aws_route53_zone.main: Read complete after 1s [id=Z101503627MAVI1JVNMBC][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_acm_certificate.app_cert[0m will be created
[0m  [32m+[0m[0m resource "aws_acm_certificate" "app_cert" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m domain_name               = "dev-vysh.com"
      [32m+[0m[0m domain_validation_options = [
          [32m+[0m[0m {
              [32m+[0m[0m domain_name           = "dev-vysh.com"
              [32m+[0m[0m resource_record_name  = (known after apply)
              [32m+[0m[0m resource_record_type  = (known after apply)
              [32m+[0m[0m resource_record_value = (known after apply)
            },
        ]
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m key_algorithm             = (known after apply)
      [32m+[0m[0m not_after                 = (known after apply)
      [32m+[0m[0m not_before                = (known after apply)
      [32m+[0m[0m pending_renewal           = (known after apply)
      [32m+[0m[0m renewal_eligibility       = (known after apply)
      [32m+[0m[0m renewal_summary           = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m subject_alternative_names = [
          [32m+[0m[0m "dev-vysh.com",
        ]
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Name" = "app-cert"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Name" = "app-cert"
        }
      [32m+[0m[0m type                      = (known after apply)
      [32m+[0m[0m validation_emails         = (known after apply)
      [32m+[0m[0m validation_method         = "DNS"

      [32m+[0m[0m options (known after apply)
    }

[1m  # aws_acm_certificate.site_cert[0m will be created
[0m  [32m+[0m[0m resource "aws_acm_certificate" "site_cert" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m domain_name               = "dev-vysh.com"
      [32m+[0m[0m domain_validation_options = [
          [32m+[0m[0m {
              [32m+[0m[0m domain_name           = "dev-vysh.com"
              [32m+[0m[0m resource_record_name  = (known after apply)
              [32m+[0m[0m resource_record_type  = (known after apply)
              [32m+[0m[0m resource_record_value = (known after apply)
            },
        ]
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m key_algorithm             = (known after apply)
      [32m+[0m[0m not_after                 = (known after apply)
      [32m+[0m[0m not_before                = (known after apply)
      [32m+[0m[0m pending_renewal           = (known after apply)
      [32m+[0m[0m renewal_eligibility       = (known after apply)
      [32m+[0m[0m renewal_summary           = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m subject_alternative_names = [
          [32m+[0m[0m "dev-vysh.com",
        ]
      [32m+[0m[0m tags_all                  = (known after apply)
      [32m+[0m[0m type                      = (known after apply)
      [32m+[0m[0m validation_emails         = (known after apply)
      [32m+[0m[0m validation_method         = "DNS"

      [32m+[0m[0m options (known after apply)
    }

[1m  # aws_acm_certificate_validation.site_cert_validation[0m will be created
[0m  [32m+[0m[0m resource "aws_acm_certificate_validation" "site_cert_validation" {
      [32m+[0m[0m certificate_arn         = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m validation_record_fqdns = (known after apply)
    }

[1m  # aws_cloudfront_distribution.frontend_distribution[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_distribution" "frontend_distribution" {
      [32m+[0m[0m aliases                         = [
          [32m+[0m[0m "dev.dev-vysh.com",
          [32m+[0m[0m "prod.dev-vysh.com",
        ]
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m caller_reference                = (known after apply)
      [32m+[0m[0m comment                         = "Front-end CloudFront Distribution"
      [32m+[0m[0m continuous_deployment_policy_id = (known after apply)
      [32m+[0m[0m default_root_object             = "index.html"
      [32m+[0m[0m domain_name                     = (known after apply)
      [32m+[0m[0m enabled                         = true
      [32m+[0m[0m etag                            = (known after apply)
      [32m+[0m[0m hosted_zone_id                  = (known after apply)
      [32m+[0m[0m http_version                    = "http2"
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m in_progress_validation_batches  = (known after apply)
      [32m+[0m[0m is_ipv6_enabled                 = true
      [32m+[0m[0m last_modified_time              = (known after apply)
      [32m+[0m[0m price_class                     = "PriceClass_All"
      [32m+[0m[0m retain_on_delete                = false
      [32m+[0m[0m staging                         = false
      [32m+[0m[0m status                          = (known after apply)
      [32m+[0m[0m tags_all                        = (known after apply)
      [32m+[0m[0m trusted_key_groups              = (known after apply)
      [32m+[0m[0m trusted_signers                 = (known after apply)
      [32m+[0m[0m wait_for_deployment             = true

      [32m+[0m[0m default_cache_behavior {
          [32m+[0m[0m allowed_methods        = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m cached_methods         = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress               = false
          [32m+[0m[0m default_ttl            = 3600
          [32m+[0m[0m max_ttl                = 86400
          [32m+[0m[0m min_ttl                = 0
          [32m+[0m[0m target_origin_id       = "S3-prod-bucket"
          [32m+[0m[0m trusted_key_groups     = (known after apply)
          [32m+[0m[0m trusted_signers        = (known after apply)
          [32m+[0m[0m viewer_protocol_policy = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = [
                  [32m+[0m[0m "Host",
                ]
              [32m+[0m[0m query_string            = false
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward           = "none"
                  [32m+[0m[0m whitelisted_names = (known after apply)
                }
            }
        }

      [32m+[0m[0m ordered_cache_behavior {
          [32m+[0m[0m allowed_methods          = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m cache_policy_id          = "managed-caching-optimized"
          [32m+[0m[0m cached_methods           = [
              [32m+[0m[0m "GET",
              [32m+[0m[0m "HEAD",
            ]
          [32m+[0m[0m compress                 = false
          [32m+[0m[0m default_ttl              = 3600
          [32m+[0m[0m max_ttl                  = 86400
          [32m+[0m[0m min_ttl                  = 0
          [32m+[0m[0m origin_request_policy_id = "managed-origin-request-policy-all-viewer"
          [32m+[0m[0m path_pattern             = "*"
          [32m+[0m[0m target_origin_id         = "S3-dev-bucket"
          [32m+[0m[0m viewer_protocol_policy   = "redirect-to-https"

          [32m+[0m[0m forwarded_values {
              [32m+[0m[0m headers                 = [
                  [32m+[0m[0m "Host",
                ]
              [32m+[0m[0m query_string            = false
              [32m+[0m[0m query_string_cache_keys = (known after apply)

              [32m+[0m[0m cookies {
                  [32m+[0m[0m forward = "none"
                }
            }
        }

      [32m+[0m[0m origin {
          [32m+[0m[0m connection_attempts      = 3
          [32m+[0m[0m connection_timeout       = 10
          [32m+[0m[0m domain_name              = (known after apply)
          [32m+[0m[0m origin_id                = "S3-dev-bucket"
            [90m# (2 unchanged attributes hidden)[0m[0m

          [32m+[0m[0m s3_origin_config {
              [32m+[0m[0m origin_access_identity = (known after apply)
            }
        }
      [32m+[0m[0m origin {
          [32m+[0m[0m connection_attempts      = 3
          [32m+[0m[0m connection_timeout       = 10
          [32m+[0m[0m domain_name              = (known after apply)
          [32m+[0m[0m origin_id                = "S3-prod-bucket"
            [90m# (2 unchanged attributes hidden)[0m[0m

          [32m+[0m[0m s3_origin_config {
              [32m+[0m[0m origin_access_identity = (known after apply)
            }
        }

      [32m+[0m[0m restrictions {
          [32m+[0m[0m geo_restriction {
              [32m+[0m[0m locations        = (known after apply)
              [32m+[0m[0m restriction_type = "none"
            }
        }

      [32m+[0m[0m viewer_certificate {
          [32m+[0m[0m acm_certificate_arn      = (known after apply)
          [32m+[0m[0m minimum_protocol_version = "TLSv1"
          [32m+[0m[0m ssl_support_method       = "sni-only"
        }
    }

[1m  # aws_cloudfront_origin_access_identity.oai[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudfront_origin_access_identity" "oai" {
      [32m+[0m[0m caller_reference                = (known after apply)
      [32m+[0m[0m cloudfront_access_identity_path = (known after apply)
      [32m+[0m[0m comment                         = "OAI for S3 buckets"
      [32m+[0m[0m etag                            = (known after apply)
      [32m+[0m[0m iam_arn                         = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m s3_canonical_user_id            = (known after apply)
    }

[1m  # aws_ecr_repository.backend_rds_dev[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "backend_rds_dev" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "backend_rds_dev"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_ecr_repository.backend_rds_prod[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "backend_rds_prod" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "backend_rds_prod"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_ecr_repository.backend_redis_dev[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "backend_redis_dev" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "backend_redis_dev"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_ecr_repository.backend_redis_prod[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "backend_redis_prod" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "backend_redis_prod"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eip.eip_dev[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "eip_dev" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "EIP Backend Dev"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "EIP Backend Dev"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # aws_eip.eip_prod[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "eip_prod" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Name" = "EIP Backend Prod"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Name" = "EIP Backend Prod"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # aws_instance.backend_dev[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "backend_dev" {
      [32m+[0m[0m ami                                  = "ami-07652eda1fbad7432"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.micro"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = (known after apply)
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "Backend Dev"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "Backend Dev"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "dccab352c3c193757c93e55716dabc654206a716"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device (known after apply)
    }

[1m  # aws_instance.backend_prod[0m will be created
[0m  [32m+[0m[0m resource "aws_instance" "backend_prod" {
      [32m+[0m[0m ami                                  = "ami-07652eda1fbad7432"
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m associate_public_ip_address          = (known after apply)
      [32m+[0m[0m availability_zone                    = (known after apply)
      [32m+[0m[0m cpu_core_count                       = (known after apply)
      [32m+[0m[0m cpu_threads_per_core                 = (known after apply)
      [32m+[0m[0m disable_api_stop                     = (known after apply)
      [32m+[0m[0m disable_api_termination              = (known after apply)
      [32m+[0m[0m ebs_optimized                        = (known after apply)
      [32m+[0m[0m get_password_data                    = false
      [32m+[0m[0m host_id                              = (known after apply)
      [32m+[0m[0m host_resource_group_arn              = (known after apply)
      [32m+[0m[0m iam_instance_profile                 = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_initiated_shutdown_behavior = (known after apply)
      [32m+[0m[0m instance_lifecycle                   = (known after apply)
      [32m+[0m[0m instance_state                       = (known after apply)
      [32m+[0m[0m instance_type                        = "t3.small"
      [32m+[0m[0m ipv6_address_count                   = (known after apply)
      [32m+[0m[0m ipv6_addresses                       = (known after apply)
      [32m+[0m[0m key_name                             = (known after apply)
      [32m+[0m[0m monitoring                           = (known after apply)
      [32m+[0m[0m outpost_arn                          = (known after apply)
      [32m+[0m[0m password_data                        = (known after apply)
      [32m+[0m[0m placement_group                      = (known after apply)
      [32m+[0m[0m placement_partition_number           = (known after apply)
      [32m+[0m[0m primary_network_interface_id         = (known after apply)
      [32m+[0m[0m private_dns                          = (known after apply)
      [32m+[0m[0m private_ip                           = (known after apply)
      [32m+[0m[0m public_dns                           = (known after apply)
      [32m+[0m[0m public_ip                            = (known after apply)
      [32m+[0m[0m secondary_private_ips                = (known after apply)
      [32m+[0m[0m security_groups                      = (known after apply)
      [32m+[0m[0m source_dest_check                    = true
      [32m+[0m[0m spot_instance_request_id             = (known after apply)
      [32m+[0m[0m subnet_id                            = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Name" = "Backend Prod"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Name" = "Backend Prod"
        }
      [32m+[0m[0m tenancy                              = (known after apply)
      [32m+[0m[0m user_data                            = "dccab352c3c193757c93e55716dabc654206a716"
      [32m+[0m[0m user_data_base64                     = (known after apply)
      [32m+[0m[0m user_data_replace_on_change          = false
      [32m+[0m[0m vpc_security_group_ids               = (known after apply)

      [32m+[0m[0m capacity_reservation_specification (known after apply)

      [32m+[0m[0m cpu_options (known after apply)

      [32m+[0m[0m ebs_block_device (known after apply)

      [32m+[0m[0m enclave_options (known after apply)

      [32m+[0m[0m ephemeral_block_device (known after apply)

      [32m+[0m[0m instance_market_options (known after apply)

      [32m+[0m[0m maintenance_options (known after apply)

      [32m+[0m[0m metadata_options (known after apply)

      [32m+[0m[0m network_interface (known after apply)

      [32m+[0m[0m private_dns_name_options (known after apply)

      [32m+[0m[0m root_block_device (known after apply)
    }

[1m  # aws_internet_gateway.igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags_all = (known after apply)
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # aws_lb.app_lb[0m will be created
[0m  [32m+[0m[0m resource "aws_lb" "app_lb" {
      [32m+[0m[0m arn                                                          = (known after apply)
      [32m+[0m[0m arn_suffix                                                   = (known after apply)
      [32m+[0m[0m client_keep_alive                                            = 3600
      [32m+[0m[0m desync_mitigation_mode                                       = "defensive"
      [32m+[0m[0m dns_name                                                     = (known after apply)
      [32m+[0m[0m drop_invalid_header_fields                                   = false
      [32m+[0m[0m enable_deletion_protection                                   = false
      [32m+[0m[0m enable_http2                                                 = true
      [32m+[0m[0m enable_tls_version_and_cipher_suite_headers                  = false
      [32m+[0m[0m enable_waf_fail_open                                         = false
      [32m+[0m[0m enable_xff_client_port                                       = false
      [32m+[0m[0m enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      [32m+[0m[0m id                                                           = (known after apply)
      [32m+[0m[0m idle_timeout                                                 = 60
      [32m+[0m[0m internal                                                     = false
      [32m+[0m[0m ip_address_type                                              = (known after apply)
      [32m+[0m[0m load_balancer_type                                           = "application"
      [32m+[0m[0m name                                                         = "app-lb"
      [32m+[0m[0m name_prefix                                                  = (known after apply)
      [32m+[0m[0m preserve_host_header                                         = false
      [32m+[0m[0m security_groups                                              = (known after apply)
      [32m+[0m[0m subnets                                                      = (known after apply)
      [32m+[0m[0m tags_all                                                     = (known after apply)
      [32m+[0m[0m vpc_id                                                       = (known after apply)
      [32m+[0m[0m xff_header_processing_mode                                   = "append"
      [32m+[0m[0m zone_id                                                      = (known after apply)

      [32m+[0m[0m subnet_mapping (known after apply)
    }

[1m  # aws_lb_listener.http[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "http" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 80
      [32m+[0m[0m protocol          = "HTTP"
      [32m+[0m[0m ssl_policy        = (known after apply)
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # aws_lb_listener.https[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_listener" "https" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m certificate_arn   = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m load_balancer_arn = (known after apply)
      [32m+[0m[0m port              = 443
      [32m+[0m[0m protocol          = "HTTPS"
      [32m+[0m[0m ssl_policy        = "ELBSecurityPolicy-2016-08"
      [32m+[0m[0m tags_all          = (known after apply)

      [32m+[0m[0m default_action {
          [32m+[0m[0m order            = (known after apply)
          [32m+[0m[0m target_group_arn = (known after apply)
          [32m+[0m[0m type             = "forward"
        }

      [32m+[0m[0m mutual_authentication (known after apply)
    }

[1m  # aws_lb_target_group.app_tg[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group" "app_tg" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m arn_suffix                         = (known after apply)
      [32m+[0m[0m connection_termination             = (known after apply)
      [32m+[0m[0m deregistration_delay               = "300"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m ip_address_type                    = (known after apply)
      [32m+[0m[0m lambda_multi_value_headers_enabled = false
      [32m+[0m[0m load_balancer_arns                 = (known after apply)
      [32m+[0m[0m load_balancing_algorithm_type      = (known after apply)
      [32m+[0m[0m load_balancing_anomaly_mitigation  = (known after apply)
      [32m+[0m[0m load_balancing_cross_zone_enabled  = (known after apply)
      [32m+[0m[0m name                               = "app-tg"
      [32m+[0m[0m name_prefix                        = (known after apply)
      [32m+[0m[0m port                               = 80
      [32m+[0m[0m preserve_client_ip                 = (known after apply)
      [32m+[0m[0m protocol                           = "HTTP"
      [32m+[0m[0m protocol_version                   = (known after apply)
      [32m+[0m[0m proxy_protocol_v2                  = false
      [32m+[0m[0m slow_start                         = 0
      [32m+[0m[0m tags_all                           = (known after apply)
      [32m+[0m[0m target_type                        = "instance"
      [32m+[0m[0m vpc_id                             = (known after apply)

      [32m+[0m[0m health_check {
          [32m+[0m[0m enabled             = true
          [32m+[0m[0m healthy_threshold   = 5
          [32m+[0m[0m interval            = 30
          [32m+[0m[0m matcher             = "200"
          [32m+[0m[0m path                = "/"
          [32m+[0m[0m port                = "traffic-port"
          [32m+[0m[0m protocol            = "HTTP"
          [32m+[0m[0m timeout             = 5
          [32m+[0m[0m unhealthy_threshold = 2
        }

      [32m+[0m[0m stickiness (known after apply)

      [32m+[0m[0m target_failover (known after apply)

      [32m+[0m[0m target_group_health (known after apply)

      [32m+[0m[0m target_health_state (known after apply)
    }

[1m  # aws_lb_target_group_attachment.app_tg_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group_attachment" "app_tg_attachment" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m port             = 80
      [32m+[0m[0m target_group_arn = (known after apply)
      [32m+[0m[0m target_id        = (known after apply)
    }

[1m  # aws_lb_target_group_attachment.app_tg_attachment1[0m will be created
[0m  [32m+[0m[0m resource "aws_lb_target_group_attachment" "app_tg_attachment1" {
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m port             = 80
      [32m+[0m[0m target_group_arn = (known after apply)
      [32m+[0m[0m target_id        = (known after apply)
    }

[1m  # aws_route53_record.site_cert_dns[0m will be created
[0m  [32m+[0m[0m resource "aws_route53_record" "site_cert_dns" {
      [32m+[0m[0m allow_overwrite = true
      [32m+[0m[0m fqdn            = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m name            = (known after apply)
      [32m+[0m[0m records         = (known after apply)
      [32m+[0m[0m ttl             = 60
      [32m+[0m[0m type            = (known after apply)
      [32m+[0m[0m zone_id         = "Z101503627MAVI1JVNMBC"
    }

[1m  # aws_route53_record.www[0m will be created
[0m  [32m+[0m[0m resource "aws_route53_record" "www" {
      [32m+[0m[0m allow_overwrite = (known after apply)
      [32m+[0m[0m fqdn            = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m name            = "www"
      [32m+[0m[0m type            = "A"
      [32m+[0m[0m zone_id         = "Z101503627MAVI1JVNMBC"

      [32m+[0m[0m alias {
          [32m+[0m[0m evaluate_target_health = false
          [32m+[0m[0m name                   = (known after apply)
          [32m+[0m[0m zone_id                = (known after apply)
        }
    }

[1m  # aws_s3_bucket.dev_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "dev_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "dev-xew"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket.prod_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "prod_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "prod-xew"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket_policy.dev_bucket_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "dev_bucket_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # aws_s3_bucket_policy.prod_bucket_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "prod_bucket_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # aws_s3_bucket_public_access_block.dev_allow_public_access[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "dev_allow_public_access" {
      [32m+[0m[0m block_public_acls       = false
      [32m+[0m[0m block_public_policy     = false
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = false
      [32m+[0m[0m restrict_public_buckets = false
    }

[1m  # aws_s3_bucket_public_access_block.prod_allow_public_access[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "prod_allow_public_access" {
      [32m+[0m[0m block_public_acls       = false
      [32m+[0m[0m block_public_policy     = false
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = false
      [32m+[0m[0m restrict_public_buckets = false
    }

[1m  # aws_s3_bucket_website_configuration.dev_bucket_website[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_website_configuration" "dev_bucket_website" {
      [32m+[0m[0m bucket           = "dev-xew"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m routing_rules    = (known after apply)
      [32m+[0m[0m website_domain   = (known after apply)
      [32m+[0m[0m website_endpoint = (known after apply)

      [32m+[0m[0m error_document {
          [32m+[0m[0m key = "error.html"
        }

      [32m+[0m[0m index_document {
          [32m+[0m[0m suffix = "index.html"
        }

      [32m+[0m[0m routing_rule (known after apply)
    }

[1m  # aws_s3_bucket_website_configuration.prod_bucket_website[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_website_configuration" "prod_bucket_website" {
      [32m+[0m[0m bucket           = "prod-xew"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m routing_rules    = (known after apply)
      [32m+[0m[0m website_domain   = (known after apply)
      [32m+[0m[0m website_endpoint = (known after apply)

      [32m+[0m[0m error_document {
          [32m+[0m[0m key = "error.html"
        }

      [32m+[0m[0m index_document {
          [32m+[0m[0m suffix = "index.html"
        }

      [32m+[0m[0m routing_rule (known after apply)
    }

[1m  # aws_security_group.alb_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "alb_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "alb-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_security_group.ec2_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "ec2_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "ec2-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # aws_subnet.public_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-central-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_subnet.public_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "eu-central-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # aws_vpc.main_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "main_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags_all                             = (known after apply)
    }

[1m  # null_resource.dev_delay[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "dev_delay" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # null_resource.prod_delay[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "prod_delay" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 37 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m alb_dns_name           = (known after apply)
  [32m+[0m[0m cloudfront_domain_name = (known after apply)
  [32m+[0m[0m dev_bucket_name        = "dev-xew"
  [32m+[0m[0m prod_bucket_name       = "prod-xew"
  [32m+[0m[0m route53_zone_id        = "Z101503627MAVI1JVNMBC"
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
