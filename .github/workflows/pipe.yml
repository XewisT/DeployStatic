name: Deploy to ECR

on:
  workflow_dispatch:
  push:
    branches:
      - Dev
      - Prod

env:
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  IMAGE_TAG: ${{ github.run_number }}
  ENVNAME: ${{ github.ref_name }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      ec2_host: ${{ steps.set-env.outputs.ec2_host }}
      s3_bucket: ${{ steps.set-env.outputs.s3_bucket }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          if [ "${{ github.ref_name }}" == "Prod" ]; then
            EC2_HOST=${{ vars.EC2_HOST_PROD }}
            S3_BUCKET="prod-xew"
          else
            EC2_HOST=${{ vars.EC2_HOST_DEV }}
            S3_BUCKET="dev-xew"
          fi
          echo "::set-output name=ec2_host::${EC2_HOST}"
          echo "::set-output name=s3_bucket::${S3_BUCKET}"

  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend_rds, backend_redis]
    needs: set-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push ${{ matrix.service }} image to ECR
        run: |
          ENVNAME_LOWER=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
          ECR_REPOSITORY="${{ matrix.service }}_${ENVNAME_LOWER}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ENVNAME-$IMAGE_TAG -f ${{ matrix.service }}/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVNAME-$IMAGE_TAG

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          for SERVICE in backend_rds backend_redis; do
            ECR_REPOSITORY="${SERVICE}_${{ github.ref_name }} | tr '[:upper:]' '[:lower:]'"
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.set-environment.outputs.ec2_host }} << EOF
              aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
              yq e ".services.$SERVICE.image = '$ECR_REGISTRY/$ECR_REPOSITORY:$ENVNAME-$IMAGE_TAG'" -i docker-compose.yml
          EOF
          done

  restart-docker-compose:
    needs: deploy-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Restart docker-compose
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.set-environment.outputs.ec2_host }} << EOF
            docker-compose down
            docker-compose up -d
          EOF

  sync-files-to-s3:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Sync files to S3
        run: |
          ls -la
          aws s3 sync frontend/ s3://$S3_BUCKET --delete

  invalidate-cloudfront:
    needs: sync-files-to-s3
    runs-on: ubuntu-latest
    steps:
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"


# name: Deploy to ECR

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - Dev
#       - Prod

# env:
#   ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
#   ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
#   AWS_REGION: ${{ vars.AWS_REGION }}
#   IMAGE_TAG: ${{ github.run_number }}
#   ENVNAME: ${{ github.ref_name }}
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# jobs:
#   set-environment-backend_rds:
#     runs-on: ubuntu-latest
#     outputs:
#       ecr_repository: ${{ steps.set-env.outputs.ecr_repository }}
#       ec2_host: ${{ steps.set-env.outputs.ec2_host }}
#       s3_bucket: ${{ steps.set-env.outputs.s3_bucket }}
#     steps:
#       - name: Set environment variables for backend_rds
#         id: set-env
#         run: |
#           if [ "${{ github.ref_name }}" == "Prod" ]; then
#             ECR_REPOSITORY="backend_rds_prod"
#             EC2_HOST=${{ vars.EC2_HOST_PROD }}
#             S3_BUCKET="prod-xew"
#           else
#             ECR_REPOSITORY="backend_rds_dev"
#             EC2_HOST=${{ vars.EC2_HOST_DEV }}
#             S3_BUCKET="dev-xew"
#           fi
#           echo "::set-output name=ecr_repository::${ECR_REPOSITORY}"
#           echo "::set-output name=ec2_host::${EC2_HOST}"
#           echo "::set-output name=s3_bucket::${S3_BUCKET}}"

#   build-and-push-backend_rds:
#     needs: set-environment-backend_rds
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Log in to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build and push backend_rds image to ECR
#         run: |
#           docker build -t $ECR_REGISTRY/${{ needs.set-environment-backend_rds.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG -f backend_rds/Dockerfile .
#           docker push $ECR_REGISTRY/${{ needs.set-environment-backend_rds.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG

#   set-environment-backend_redis:
#     runs-on: ubuntu-latest
#     outputs:
#       ecr_repository: ${{ steps.set-env.outputs.ecr_repository }}
#       ec2_host: ${{ steps.set-env.outputs.ec2_host }}
#       s3_bucket: ${{ steps.set-env.outputs.s3_bucket }}
#     steps:
#       - name: Set environment variables for backend_redis
#         id: set-env
#         run: |
#           if [ "${{ github.ref_name }}" == "Prod" ]; then
#             ECR_REPOSITORY="backend_redis_prod"
#             EC2_HOST=${{ vars.EC2_HOST_PROD }}
#             S3_BUCKET="prod-xew"
#           else
#             ECR_REPOSITORY="backend_redis_dev"
#             EC2_HOST=${{ vars.EC2_HOST_DEV }}
#             S3_BUCKET="dev-xew"
#           fi
#           echo "::set-output name=ecr_repository::${ECR_REPOSITORY}"
#           echo "::set-output name=ec2_host::${EC2_HOST}"
#           echo "::set-output name=s3_bucket::${S3_BUCKET}}"

#   build-and-push-backend_redis:
#     needs: set-environment-backend_redis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Log in to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build and push backend_redis image to ECR
#         run: |
#           docker build -t $ECR_REGISTRY/${{ needs.set-environment-backend_redis.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG -f backend_redis/Dockerfile .
#           docker push $ECR_REGISTRY/${{ needs.set-environment-backend_redis.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG
#   deploy-to-ec2:
#     needs: 
#       - build-and-push-backend_redis
#       - build-and-push-backend_rds
      
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy to EC2
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#         run: |
#           echo "$SSH_PRIVATE_KEY" > private_key.pem
#           chmod 600 private_key.pem
#           ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.set-environment-backend_redis.outputs.ec2_host }} << EOF
#             aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
#             yq e '.services.backend_rds.image = "$ECR_REGISTRY/backend_rds:$ENVNAME-$IMAGE_TAG"' -i docker-compose.yml
#             yq e '.services.backend_redis.image = "$ECR_REGISTRY/backend_redis:$ENVNAME-$IMAGE_TAG"' -i docker-compose.yml
#           EOF

#   restart-docker-compose:
#     needs: deploy-to-ec2
#     runs-on: ubuntu-latest
#     steps:
#       - name: Restart docker-compose
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#         run: |
#           echo "$SSH_PRIVATE_KEY" > private_key.pem
#           chmod 600 private_key.pem
#           ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.set-environment-backend_redis.outputs.ec2_host }} << EOF
#             docker-compose down
#             docker-compose up -d
#           EOF

#   sync-files-to-s3:
#     needs: build-and-push-backend_redis
#     runs-on: ubuntu-latest
#     steps:
#       - name: Sync files to S3
#         run: |
#           aws s3 sync frontend/ s3://$S3_BUCKET --delete

#   invalidate-cloudfront:
#     needs: sync-files-to-s3
#     runs-on: ubuntu-latest
#     steps:
#       - name: Invalidate CloudFront cache
#         run: |
#           aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"




##
##
##
##
##
##
##
##
##




# # name: Deploy to ECR

# # on:
# #   workflow_dispatch:
# #   push:
# #     branches:
# #       - Dev
# #       - Prod

# # env:
# #   ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
# #   ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
# #   AWS_REGION: ${{ vars.AWS_REGION }}
# #   IMAGE_TAG: ${{ github.run_number }}
# #   ENVNAME: ${{ github.ref_name }}
# #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# # jobs:
# #   set-environment:
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         service: [backend_rds, backend_redis]
# #     outputs:
# #       ecr_repository: ${{ steps.set-env.outputs.ecr_repository }}
# #       ec2_host: ${{ steps.set-env.outputs.ec2_host }}
# #       s3_bucket: ${{ steps.set-env.outputs.s3_bucket }}
# #     steps:
# #       - name: Set environment variables
# #         id: set-env
# #         run: |
# #           if [ "${{ github.ref_name }}" == "Prod" ]; then
# #             ECR_REPOSITORY="${{ matrix.service }}_prod"
# #             EC2_HOST=${{ vars.EC2_HOST_PROD }}
# #             S3_BUCKET="prod-xew"
# #           else
# #             ECR_REPOSITORY="${{ matrix.service }}_dev"
# #             EC2_HOST=${{ vars.EC2_HOST_DEV }}
# #             S3_BUCKET="dev-xew"
# #           fi
# #           echo "::set-output name=ecr_repository::${ECR_REPOSITORY}"
# #           echo "::set-output name=ec2_host::${EC2_HOST}"
# #           echo "::set-output name=s3_bucket::${S3_BUCKET}"

# #   checkout-code:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v4

# #   configure-aws:
# #     needs: checkout-code
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Configure AWS credentials
# #         uses: aws-actions/configure-aws-credentials@v4
# #         with:
# #           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
# #           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
# #           aws-region: ${{ env.AWS_REGION }}

# #   login-to-ecr:
# #     needs: configure-aws
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Log in to Amazon ECR
# #         id: login-ecr
# #         uses: aws-actions/amazon-ecr-login@v2

# #   build-and-push-image:
# #     needs: login-to-ecr
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         service: [backend_rds, backend_redis]
# #     steps:
# #       - name: Build and push image to ECR
# #         run: |
# #           docker build -t $ECR_REGISTRY/${{ needs.set-environment.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG -f ${{ matrix.service }}/Dockerfile .
# #           docker push $ECR_REGISTRY/${{ needs.set-environment.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG

# #   sync-files-to-s3:
# #     needs: build-and-push-image
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Sync files to S3
# #         run: |
# #           aws s3 sync frontend/ s3://$S3_BUCKET --delete

# #   invalidate-cloudfront:
# #     needs: sync-files-to-s3
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Invalidate CloudFront cache
# #         run: |
# #           aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

# #   deploy-to-ec2:
# #     needs: invalidate-cloudfront
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         service: [backend_rds, backend_redis]
# #     steps:
# #       - name: Deploy to EC2
# #         env:
# #           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
# #         run: |
# #           echo "$SSH_PRIVATE_KEY" > private_key.pem
# #           chmod 600 private_key.pem
# #           ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.set-environment.outputs.ec2_host }} << EOF
# #             aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
# #             yq e '.services.${{ matrix.service }}.image = "$ECR_REGISTRY/${{ needs.set-environment.outputs.ecr_repository }}:$ENVNAME-$IMAGE_TAG"' -i docker-compose.yml
# #           EOF

# #   restart-docker-compose:
# #     needs: deploy-to-ec2
# #     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         service: [backend_rds, backend_redis]
# #     steps:
# #       - name: Restart docker-compose
# #         env:
# #           SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
# #         run: |
# #           echo "$SSH_PRIVATE_KEY" > private_key.pem
# #           chmod 600 private_key.pem
# #           ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.set-environment.outputs.ec2_host }} << EOF
# #             docker-compose down
# #             docker-compose up -d
# #           EOF




##
##
##
##
##
##
##
##
##
##

#

# name: Deploy to ECR

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - Dev
#       - Prod

# env:
#   ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
#   ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
#   AWS_REGION: ${{ vars.AWS_REGION }}
#   IMAGE_TAG: ${{ github.run_number }}
#   ENVNAME: ${{ github.ref_name }}

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [backend_rds, backend_redis]
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set environment variables
#       run: |
#         if [ "${{ github.ref_name }}" == "Prod" ]; then
#           ECR_REPOSITORY="${{ matrix.service }}_prod"
#           EC2_HOST=${{ vars.EC2_HOST_PROD }}
#           S3_BUCKET="prod-xew"
#         else
#           ECR_REPOSITORY="${{ matrix.service }}_dev"
#           EC2_HOST=${{ vars.EC2_HOST_DEV }}
#           S3_BUCKET="dev-xew"
#         fi
#         echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV
#         echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
#         echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ vars.AWS_REGION }}

#     - name: Log in to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

#     - name: Build and push image to ECR
#       run: |
#         docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG -f ${{ matrix.service }}/Dockerfile .
#         docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG

#     - name: Sync files to S3
#       run: |
#         aws s3 sync frontend/ s3://$S3_BUCKET --delete

#     - name: Invalidate CloudFront cache
#       run: |
#         aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

#     - name: Deploy to EC2
#       env:
#         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#       run: |
#         echo "$SSH_PRIVATE_KEY" > private_key.pem
#         chmod 600 private_key.pem
#         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << EOF
#           aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
#           yq e '.services.${{ matrix.service }}.image = "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG"' -i docker-compose.yml
#         EOF

#     - name: Restart docker-compose
#       env:
#         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#       run: |
#         echo "$SSH_PRIVATE_KEY" > private_key.pem
#         chmod 600 private_key.pem
#         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << EOF
#           docker-compose down
#           docker-compose up -d
#         EOF
