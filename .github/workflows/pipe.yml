# name: Deploy to ECR

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - Dev
#       - Prod

# env:
#   ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
#   ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
#   AWS_REGION: ${{ vars.AWS_REGION }}
#   IMAGE_TAG: ${{ github.run_number }}
#   ENVNAME: ${{ github.ref_name }}

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [backend_rds, backend_redis]
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set environment variables
#       run: |
#         if [ "${{ github.ref_name }}" == "Prod" ]; then
#           ECR_REPOSITORY="${{ matrix.service }}_prod"
#           EC2_HOST=${{ vars.EC2_HOST_PROD }}
#           S3_BUCKET="prod-xew"
#         else
#           ECR_REPOSITORY="${{ matrix.service }}_dev"
#           EC2_HOST=${{ vars.EC2_HOST_DEV }}
#           S3_BUCKET="dev-xew"
#         fi
#         echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV
#         echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
#         echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ vars.AWS_REGION }}

#     - name: Log in to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2

#     - name: Build and push image to ECR
#       run: |
#         docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG -f ${{ matrix.service }}/Dockerfile .
#         docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG

#   sync-and-invalidate:
#     runs-on: ubuntu-latest
#     needs: build-and-deploy
#     steps:
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ vars.AWS_REGION }}

#     - name: Sync files to S3
#       run: |
#         aws s3 sync frontend/ s3://$S3_BUCKET --delete

#     - name: Invalidate CloudFront cache
#       run: |
#         aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

#   restart-docker-compose:
#     runs-on: ubuntu-latest
#     needs: build-and-deploy
#     steps:
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ vars.AWS_REGION }}

#     - name: Deploy to EC2 and restart docker-compose
#       env:
#         SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#       run: |
#         echo "$SSH_PRIVATE_KEY" > private_key.pem
#         chmod 600 private_key.pem
#         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << EOF
#           cd GitDev
#           aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
#           sudo yq e '.services.${{ matrix.service }}.image = "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG"' -i docker-compose.yml
#           sudo docker-compose down
#           sudo docker-compose up -d
#         EOF

on:
  workflow_dispatch:
  push:
    branches:
      - Dev
      - Prod

env:
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  IMAGE_TAG: ${{ github.run_number }}
  ENVNAME: ${{ github.ref_name }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend_rds, backend_redis]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        if [ "${{ github.ref_name }}" == "Prod" ]; then
          ECR_REPOSITORY="${{ matrix.service }}_prod"
          EC2_HOST=${{ vars.EC2_HOST_PROD }}
          S3_BUCKET="prod-xew"
        else
          ECR_REPOSITORY="${{ matrix.service }}_dev"
          EC2_HOST=${{ vars.EC2_HOST_DEV }}
          S3_BUCKET="dev-xew"
        fi
        echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_ENV
        echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
        echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG -f ${{ matrix.service }}/Dockerfile .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG

    - name: Sync files to S3
      run: |
        aws s3 sync frontend/ s3://$S3_BUCKET --delete

    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << EOF
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          sudo yq e '.services.${{ matrix.service }}.image = "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$ENVNAME-$IMAGE_TAG"' -i docker-compose.yml
        EOF

    - name: Restart docker-compose
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST << EOF
          sudo docker-compose down
          sudo docker-compose up -d
        EOF